name: Release

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "**.md"
  pull_request:
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "**.md"

env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  GO_VERSION: "1.23.4"

permissions:
  contents: write
  packages: write

jobs:
  test:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest ]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Tests with Race Detection
        run: make test-race

      - name: Generate Test Summary
        # Explicitly list non-GUI packages for test summary generation
        run: go run gotest.tools/gotestsum@latest --junitfile unit-tests.xml --format pkgname -- github.com/autobrr/mkbrr/cmd github.com/autobrr/mkbrr/internal/...

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "unit-tests.xml"
        if: always()

  testother:
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest ]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      GOPATH: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\go' || '' }}
      GOCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\cache' || '' }}
      GOMODCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\modcache' || '' }}
      USERPROFILE: ${{ startsWith(matrix.os, 'windows') && 'D:\homedir' || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Tests (MacOS)
        if: matrix.os == 'macos-latest'
        env:
          CGO_ENABLED: 0
        run: go test github.com/autobrr/mkbrr/cmd github.com/autobrr/mkbrr/internal/... # Explicitly list non-GUI packages to test

      - name: Run Tests (Windows)
        if: matrix.os == 'windows-latest'
        env:
          CGO_ENABLED: 0
        run: go test -short github.com/autobrr/mkbrr/cmd github.com/autobrr/mkbrr/internal/...

      - name: Generate Test Summary
        if: matrix.os != 'windows-latest'
        run: go run gotest.tools/gotestsum@latest --junitfile unit-tests.xml --format pkgname

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "unit-tests.xml"
        if: always() && matrix.os != 'windows-latest'

  pgo:
    name: Generate PGO Profile
    runs-on: ubuntu-latest
    needs: [ test, testother ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Create test data for profiling
      - name: Create test data
        shell: bash
        run: |
          mkdir -p test_data
          dd if=/dev/urandom of=test_data/test1.bin bs=1M count=100
          dd if=/dev/urandom of=test_data/test2.bin bs=1M count=100
          for i in {1..20000}; do dd if=/dev/urandom bs=1023 count=1 of=test_data/file$i.bin >/dev/null 2>&1; done

      - name: Generate Profile
        env:
          CGO_ENABLED: 0
        run: |
          # Build initial binary
          # Build from the correct main package path
          go build -o mkbrr ./cmd/mkbrr/

          # Run different workload scenarios
          ./mkbrr create test_data/test1.bin --cpuprofile=cpu1.pprof
          ./mkbrr create test_data/test2.bin --cpuprofile=cpu2.pprof
          ./mkbrr create test_data --cpuprofile=cpu3.pprof

          # Verify profiles exist
          if [ ! -f cpu1.pprof ] || [ ! -f cpu2.pprof ] || [ ! -f cpu3.pprof ]; then
            echo "Error: One or more profile files not generated"
            ls -la *.pprof
            exit 1
          fi

          # Merge profiles
          go tool pprof -proto cpu1.pprof cpu2.pprof cpu3.pprof > cpu.pprof

          # Verify final profile
          if [ ! -s cpu.pprof ]; then
            echo "Error: Final profile not generated or empty"
            exit 1
          fi

      - name: Upload pprof
        uses: actions/upload-artifact@v4
        with:
          name: pprof
          path: cpu.pprof

  # Build job: runs on matrix, builds native artifacts only
  goreleaserbuild:
    name: Build distribution binaries (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    needs: [ pgo ]
    steps:
      - name: Install Linux CGO dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y gcc libgl1-mesa-dev xorg-dev

      # Windows usually has necessary MinGW/GCC via MSYS2 on runners
      # MacOS usually has Xcode Command Line Tools on runners

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download pprof
        uses: actions/download-artifact@v4
        with:
          name: pprof
          path: .

      # Use goreleaser build --id to build only native artifacts for this runner
      # --snapshot is used so we don't need a Git tag for the build step
      - name: Run GoReleaser Build by ID
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: build --snapshot --clean --id={{ matrix.os }}
        env:
          # GORELEASER_KEY is needed for CGO builds
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          BUILDER: ${{ github.actor }}@github-actions

      # Upload the entire dist directory containing the built artifacts for this OS
      - name: Upload GoReleaser artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist

  # Release job: runs on tags, merges artifacts and releases
  goreleasermerge:
    name: Merge GoReleaser artifacts and release
    runs-on: ubuntu-latest
    needs: [ goreleaserbuild ]
    # Only run the merge and release step on tag pushes
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure tags are fetched

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download all GoReleaser artifacts
        uses: actions/download-artifact@v4
        with:
          # Use pattern to download all dist-* directories
          pattern: dist-*
          path: . # Download to the root, preserving directory structure (dist-ubuntu-latest/, dist-windows-latest/, etc.)
          # merge-multiple: true # Not needed when downloading to root with pattern

      # Display structure of downloaded artifacts for debugging
      - name: List downloaded artifacts
        run: ls -R .

      # Run goreleaser release - GoReleaser automatically merges multiple dist-* directories
      - name: Run GoReleaser Release (Merge)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          BUILDER: ${{ github.actor }}@github-actions

      # Optional: Upload final combined assets if needed elsewhere
      # Note: The release step already uploads to GitHub Releases
      # - name: Upload Final Assets (Optional)
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: mkbrr-release-assets
      #     path: |
      #       dist/*.tar.gz
      #       dist/*.zip
      #       dist/*.deb
      #       dist/*.rpm
      #       dist/*.exe
