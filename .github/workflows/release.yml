name: Release

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "**.md"
  pull_request:
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "**.md"

env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  GO_VERSION: "1.23.4"

permissions:
  contents: write
  packages: write

jobs:
  test:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest ]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Tests with Race Detection
        run: make test-race

      - name: Generate Test Summary
        run: go run gotest.tools/gotestsum@latest --junitfile unit-tests.xml --format pkgname

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "unit-tests.xml"
        if: always()

  testother:
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest ]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      GOPATH: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\go' || '' }}
      GOCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\cache' || '' }}
      GOMODCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\modcache' || '' }}
      USERPROFILE: ${{ startsWith(matrix.os, 'windows') && 'D:\homedir' || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Tests (MacOS)
        if: matrix.os == 'macos-latest'
        env:
          CGO_ENABLED: 0
        run: go test ./...

      - name: Run Tests (Windows)
        if: matrix.os == 'windows-latest'
        env:
          CGO_ENABLED: 0
        run: go test -short ./...

      - name: Generate Test Summary
        if: matrix.os != 'windows-latest'
        run: go run gotest.tools/gotestsum@latest --junitfile unit-tests.xml --format pkgname

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "unit-tests.xml"
        if: always() && matrix.os != 'windows-latest'

  pgo:
    name: Generate PGO Profile
    runs-on: ubuntu-latest
    #needs: [ test, testother ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Create test data for profiling
      - name: Create test data
        shell: bash
        run: |
          mkdir -p test_data
          dd if=/dev/urandom of=test_data/test1.bin bs=1M count=100
          dd if=/dev/urandom of=test_data/test2.bin bs=1M count=100
          for i in {1..20000}; do dd if=/dev/urandom bs=1023 count=1 of=test_data/file$i.bin >/dev/null 2>&1; done

      - name: Generate Profile
        env:
          CGO_ENABLED: 0
        run: |
          # Build initial binary
          go build -o mkbrr

          # Run different workload scenarios
          ./mkbrr create test_data/test1.bin --cpuprofile=cpu1.pprof
          ./mkbrr create test_data/test2.bin --cpuprofile=cpu2.pprof
          ./mkbrr create test_data --cpuprofile=cpu3.pprof

          # Verify profiles exist
          if [ ! -f cpu1.pprof ] || [ ! -f cpu2.pprof ] || [ ! -f cpu3.pprof ]; then
            echo "Error: One or more profile files not generated"
            ls -la *.pprof
            exit 1
          fi

          # Merge profiles
          go tool pprof -proto cpu1.pprof cpu2.pprof cpu3.pprof > cpu.pprof

          # Verify final profile
          if [ ! -s cpu.pprof ]; then
            echo "Error: Final profile not generated or empty"
            exit 1
          fi

      - name: Upload pprof artifact
        uses: actions/upload-artifact@v4
        with:
          name: pprof
          path: cpu.pprof

  prepare:
    name: Prepare build for ${{ matrix.goos }}/${{ matrix.goarch }}
    needs: [ pgo, test, testother ]
    # Use ubuntu-latest for Windows builds, otherwise use the matrix runner
    runs-on: ${{ matrix.goos == 'windows' && 'ubuntu-latest' || matrix.runner }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            runner: ubuntu-latest
          - goos: windows
            goarch: amd64
            runner: windows-latest  # This won't be used for Windows due to the runs-on condition above
          - goos: darwin
            goarch: amd64
            runner: macos-latest
          - goos: darwin
            goarch: arm64
            runner: macos-latest
          - goos: freebsd
            goarch: amd64
            runner: ubuntu-latest
          - goos: freebsd
            goarch: arm
            runner: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download pprof artifact
        uses: actions/download-artifact@v4
        with:
          name: pprof
          path: .

      - name: Set short git commit SHA
        shell: bash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Cache GoReleaser artifacts
        id: cache-goreleaser
        uses: actions/cache@v4
        with:
          path: dist
          key: goreleaser-${{ matrix.goos }}-${{ matrix.goarch }}-${{ env.sha_short }}

      - name: Run GoReleaser split build
        if: steps.cache-goreleaser.outputs.cache-hit != 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release --clean --split
        env:
          GGOOS: ${{ matrix.goos }}
          GGOARCH: ${{ matrix.goarch }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          BUILDER: ${{ github.actor }}@github-actions

      - name: Debug GoReleaser output directory structure
        if: steps.cache-goreleaser.outputs.cache-hit != 'true'
        run: |
          echo "Checking dist directory structure:"
          ls -la dist || echo "dist directory does not exist"
          if [ -d dist ]; then
            find dist -type d | sort
          fi

      # Re-upload to cache if it was a miss and build ran
      - name: Update GoReleaser cache
        if: steps.cache-goreleaser.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: dist
          key: ${{ steps.cache-goreleaser.outputs.cache-primary-key }} # Use the key generated by the cache action

  release:
    name: Merge builds and release
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Set short git commit SHA
        shell: bash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Restore all cached artifacts from prepare jobs
      - name: Restore Linux AMD64 artifacts
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-linux-amd64-${{ env.sha_short }}
          fail-on-cache-miss: false

      - name: Restore Linux ARM artifacts
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-linux-arm-${{ env.sha_short }}
          fail-on-cache-miss: false

      - name: Restore Linux ARM64 artifacts
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-linux-arm64-${{ env.sha_short }}
          fail-on-cache-miss: false

      - name: Restore Windows AMD64 artifacts
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-windows-amd64-${{ env.sha_short }}
          fail-on-cache-miss: false

      - name: Restore Darwin AMD64 artifacts
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-darwin-amd64-${{ env.sha_short }}
          fail-on-cache-miss: false

      - name: Restore Darwin ARM64 artifacts
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-darwin-arm64-${{ env.sha_short }}
          fail-on-cache-miss: false

      - name: Restore FreeBSD AMD64 artifacts
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-freebsd-amd64-${{ env.sha_short }}
          fail-on-cache-miss: false

      - name: Restore FreeBSD ARM artifacts
        uses: actions/cache/restore@v4
        with:
          path: dist
          key: goreleaser-freebsd-arm-${{ env.sha_short }}
          fail-on-cache-miss: false


      - name: List restored dist directory
        run: ls -R dist

      - name: Run GoReleaser merge and publish
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release continue --merge --parallelism 5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          BUILDER: ${{ github.actor }}@github-actions

      - name: Upload final assets artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: mkbrr-release-assets
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.deb
            dist/*.rpm
            dist/*.apk
            dist/*.pkg.tar.zst # Arch Linux package
            dist/*checksums.txt
