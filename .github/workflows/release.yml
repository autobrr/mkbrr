name: Release

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "**.md"
  pull_request:
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "**.md"

env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  GO_VERSION: "1.23.4"

permissions:
  contents: write
  packages: write

jobs:
  test:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest ]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Tests with Race Detection
        env:
          CGO_ENABLED: 1
        run: make test-race

      - name: Create Profile environment
        run: |
          printf '#!/usr/bin/env bash\nset -eu\nfor pkg in $(go list "$@"); do\n\tgo test -json -cpuprofile="profile/$(echo $pkg | tr / -).pprof" "$pkg"\ndone' | tee -a profile.sh;
          chmod +x profile.sh;
          mkdir profile;

      - name: Run Tests with Profiling
        run: go run gotest.tools/gotestsum@latest --junitfile unit-tests.xml --format pkgname --raw-command ./profile.sh -- ./...

      - name: Upload pprof
        uses: actions/upload-artifact@v4
        with:
          name: pprof-test-${{ matrix.os }}
          path: profile

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "unit-tests.xml"
        if: always()

  testother:
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest ]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      GOPATH: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\go' || '' }}
      GOCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\cache' || '' }}
      GOMODCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\modcache' || '' }}
      USERPROFILE: ${{ startsWith(matrix.os, 'windows') && 'D:\homedir' || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Tests with Race Detection (Unix)
        if: matrix.os != 'windows-latest'
        env:
          CGO_ENABLED: 1
        run: make test-race

      - name: Run Tests (Windows)
        if: matrix.os == 'windows-latest'
        env:
          CGO_ENABLED: 0
        run: go test -short ./...

      - name: Create Profile Directory
        run: mkdir -p profile

      - name: Run Tests with Profiling (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          for pkg in $(go list ./...); do
            go test -json -cpuprofile="profile/$(echo $pkg | tr / -).pprof" "$pkg"
          done

      - name: Run Tests with Profiling (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          foreach ($pkg in $(go list ./...)) {
            $safeName = $pkg -replace '/', '-'
            go test -short -json -cpuprofile="profile/$safeName.pprof" $pkg
          }

      - name: Generate Test Summary
        if: matrix.os != 'windows-latest'
        run: go run gotest.tools/gotestsum@latest --junitfile unit-tests.xml --format pkgname

      - name: Upload pprof
        uses: actions/upload-artifact@v4
        with:
          name: pprof-test-${{ matrix.os }}
          path: profile

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "unit-tests.xml"
        if: always() && matrix.os != 'windows-latest'

  pgo:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    name: Automatic PGO run ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [ test, testother ]
    env:
      GOPATH: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\go' || '' }}
      GOCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\cache' || '' }}
      GOMODCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\modcache' || '' }}
      USERPROFILE: ${{ startsWith(matrix.os, 'windows') && 'D:\homedir' || '' }}
      CGO_ENABLED: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Create test data for profiling
      - name: Create test data
        shell: bash
        run: |
          mkdir -p test_data
          dd if=/dev/urandom of=test_data/test1.bin bs=1M count=100 || true
          dd if=/dev/urandom of=test_data/test2.bin bs=1M count=100 || true

      - name: Generate Profile
        run: |
          go build -o mkbrr
          ./mkbrr create test_data -cpuprofile=cpu-${{ matrix.os }}.pprof

      - name: Upload pprof
        uses: actions/upload-artifact@v4
        with:
          name: pprof-pgo-${{ matrix.os }}
          path: cpu-${{ matrix.os }}.pprof

  goprofilecombine:
    name: Combine pprof profiles
    runs-on: ubuntu-latest
    needs: [ pgo ]
    steps:
      - name: Download pprof profiles
        uses: actions/download-artifact@v4
        with:
          pattern: pprof-*
          merge-multiple: true
          path: profile

      - name: List contents
        run: ls -la profile

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Merge Profiles
        run: go tool pprof -proto profile/*.pprof | tee -a cpu.pprof

      - name: Upload pprof
        uses: actions/upload-artifact@v4
        with:
          name: pprof
          path: cpu.pprof

  goreleaserbuild:
    name: Build distribution binaries
    runs-on: ubuntu-latest
    needs: [ goprofilecombine ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download pprof
        uses: actions/download-artifact@v4
        with:
          name: pprof
          path: .

      - name: Run GoReleaser build
        if: github.event_name == 'pull_request'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean --skip=validate,publish --parallelism 5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILDER: ${{ github.actor }}@github-actions

      - name: Run GoReleaser build and publish tags
        if: startsWith(github.ref, 'refs/tags/')
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILDER: ${{ github.actor }}@github-actions

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: mkbrr
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.deb
            dist/*.rpm
