name: Release

on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v*"
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "**.md"
  pull_request:
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/images/**"
      - "**.md"

env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  GO_VERSION: "1.23.4"
  GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

permissions:
  contents: write
  packages: write

jobs:
  test:
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest ]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Tests with Race Detection
        run: make test-race

      - name: Generate Test Summary
        run: go run gotest.tools/gotestsum@latest --junitfile unit-tests.xml --format pkgname

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "unit-tests.xml"
        if: always()

  testother:
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest ]
    name: Test ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      GOPATH: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\go' || '' }}
      GOCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\cache' || '' }}
      GOMODCACHE: ${{ startsWith(matrix.os, 'windows') && 'D:\golang\modcache' || '' }}
      USERPROFILE: ${{ startsWith(matrix.os, 'windows') && 'D:\homedir' || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Tests (MacOS)
        if: matrix.os == 'macos-latest'
        env:
          CGO_ENABLED: 0
        run: go test ./...

      - name: Run Tests (Windows)
        if: matrix.os == 'windows-latest'
        env:
          CGO_ENABLED: 0
        run: go test -short ./...

      - name: Generate Test Summary
        if: matrix.os != 'windows-latest'
        run: go run gotest.tools/gotestsum@latest --junitfile unit-tests.xml --format pkgname

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "unit-tests.xml"
        if: always() && matrix.os != 'windows-latest'

  pgo:
    name: Generate PGO Profile
    runs-on: ubuntu-latest
    #needs: [ test, testother ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # Create test data for profiling
      - name: Create test data
        shell: bash
        run: |
          mkdir -p test_data
          dd if=/dev/urandom of=test_data/test1.bin bs=1M count=100
          dd if=/dev/urandom of=test_data/test2.bin bs=1M count=100
          for i in {1..20000}; do dd if=/dev/urandom bs=1023 count=1 of=test_data/file$i.bin >/dev/null 2>&1; done

      - name: Generate Profile
        env:
          CGO_ENABLED: 0
        run: |
          # Build initial binary
          go build -o mkbrr

          # Run different workload scenarios
          ./mkbrr create test_data/test1.bin --cpuprofile=cpu1.pprof
          ./mkbrr create test_data/test2.bin --cpuprofile=cpu2.pprof
          ./mkbrr create test_data --cpuprofile=cpu3.pprof

          # Verify profiles exist
          if [ ! -f cpu1.pprof ] || [ ! -f cpu2.pprof ] || [ ! -f cpu3.pprof ]; then
            echo "Error: One or more profile files not generated"
            ls -la *.pprof
            exit 1
          fi

          # Merge profiles
          go tool pprof -proto cpu1.pprof cpu2.pprof cpu3.pprof > cpu.pprof

          # Verify final profile
          if [ ! -s cpu.pprof ]; then
            echo "Error: Final profile not generated or empty"
            exit 1
          fi

      - name: Upload pprof
        uses: actions/upload-artifact@v4
        with:
          name: pprof
          path: cpu.pprof

  prepare:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      flags: ""
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: docker/setup-qemu-action@v3
        if: matrix.os == 'ubuntu-latest'
      - uses: docker/setup-buildx-action@v3
        if: matrix.os == 'ubuntu-latest'

      - name: ghcr-login
        uses: docker/login-action@v3
        if: matrix.os != 'macos-latest'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download pprof
        uses: actions/download-artifact@v4
        with:
          name: pprof
          path: .

      - if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          echo "flags=--nightly" >> $GITHUB_ENV

      - shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          path: dist/linux
          key: linux-${{ env.sha_short }}${{ env.flags }}

      - uses: actions/cache@v4
        if: matrix.os == 'macos-latest'
        with:
          path: dist/darwin
          key: darwin-${{ env.sha_short }}${{ env.flags }}

      - uses: actions/cache@v4
        if: matrix.os == 'windows-latest'
        with:
          path: dist/windows
          key: windows-${{ env.sha_short }}${{ env.flags }}
          enableCrossOsArchive: true

      - uses: actions/cache@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          path: dist/freebsd
          key: freebsd-${{ env.sha_short }}${{ env.flags }}

      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: latest
          args: release --clean --split ${{ env.flags }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

  release:
    runs-on: ubuntu-latest
    needs: [ prepare, test, testother, pgo ]
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
      flags: ""
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: sigstore/cosign-installer@v3.8.1
      - uses: anchore/sbom-action/download-syft@v0.18.0

      - name: ghcr-login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          echo "flags=--nightly" >> $GITHUB_ENV

      - shell: bash
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - id: cache-linux
        uses: actions/cache@v4
        with:
          path: dist/linux
          key: linux-${{ env.sha_short }}${{ env.flags }}

      - id: cache-darwin
        uses: actions/cache@v4
        with:
          path: dist/darwin
          key: darwin-${{ env.sha_short }}${{ env.flags }}

      - id: cache-windows
        uses: actions/cache@v4
        with:
          path: dist/windows
          key: windows-${{ env.sha_short }}${{ env.flags }}
          enableCrossOsArchive: true

      - id: cache-freebsd
        uses: actions/cache@v4
        with:
          path: dist/freebsd
          key: freebsd-${{ env.sha_short }}${{ env.flags }}

      - name: Run GoReleaser Merge
        if: steps.cache-linux.outputs.cache-hit == 'true' && steps.cache-darwin.outputs.cache-hit == 'true' && steps.cache-windows.outputs.cache-hit == 'true' && steps.cache-freebsd.outputs.cache-hit == 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: latest
          args: continue --merge ${{ github.event_name == 'pull_request' && '--skip=publish' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Upload final assets
        uses: actions/upload-artifact@v4
        with:
          name: mkbrr-release
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/*.deb
            dist/*.rpm
